/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.thrift.wrapper.domain.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-12")
public class ThriftOrderService {

  public interface Iface {

    public void save(int routingId, com.github.thrift.wrapper.domain.thrift.ThriftOrder order) throws org.apache.thrift.TException;

    public void saveAll(int routingId, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders) throws org.apache.thrift.TException;

    public void deleteOrder(long orderId) throws org.apache.thrift.TException;

    public com.github.thrift.wrapper.domain.thrift.ThriftOrder findByOrderId(long orderId) throws org.apache.thrift.TException;

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> findByPayerId(long payerId) throws org.apache.thrift.TException;

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> findByCreateTime(long createTime) throws org.apache.thrift.TException;

    public Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> findByOrderIds(List<Long> orderIds) throws org.apache.thrift.TException;

    public Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> findByPayerIds(List<Long> payerIds) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void save(int routingId, com.github.thrift.wrapper.domain.thrift.ThriftOrder order, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveAll(int routingId, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOrder(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findByOrderId(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findByPayerId(long payerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findByCreateTime(long createTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findByOrderIds(List<Long> orderIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findByPayerIds(List<Long> payerIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void save(int routingId, com.github.thrift.wrapper.domain.thrift.ThriftOrder order) throws org.apache.thrift.TException
    {
      send_save(routingId, order);
      recv_save();
    }

    public void send_save(int routingId, com.github.thrift.wrapper.domain.thrift.ThriftOrder order) throws org.apache.thrift.TException
    {
      save_args args = new save_args();
      args.setRoutingId(routingId);
      args.setOrder(order);
      sendBase("save", args);
    }

    public void recv_save() throws org.apache.thrift.TException
    {
      save_result result = new save_result();
      receiveBase(result, "save");
      return;
    }

    public void saveAll(int routingId, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders) throws org.apache.thrift.TException
    {
      send_saveAll(routingId, orders);
      recv_saveAll();
    }

    public void send_saveAll(int routingId, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders) throws org.apache.thrift.TException
    {
      saveAll_args args = new saveAll_args();
      args.setRoutingId(routingId);
      args.setOrders(orders);
      sendBase("saveAll", args);
    }

    public void recv_saveAll() throws org.apache.thrift.TException
    {
      saveAll_result result = new saveAll_result();
      receiveBase(result, "saveAll");
      return;
    }

    public void deleteOrder(long orderId) throws org.apache.thrift.TException
    {
      send_deleteOrder(orderId);
      recv_deleteOrder();
    }

    public void send_deleteOrder(long orderId) throws org.apache.thrift.TException
    {
      deleteOrder_args args = new deleteOrder_args();
      args.setOrderId(orderId);
      sendBase("deleteOrder", args);
    }

    public void recv_deleteOrder() throws org.apache.thrift.TException
    {
      deleteOrder_result result = new deleteOrder_result();
      receiveBase(result, "deleteOrder");
      return;
    }

    public com.github.thrift.wrapper.domain.thrift.ThriftOrder findByOrderId(long orderId) throws org.apache.thrift.TException
    {
      send_findByOrderId(orderId);
      return recv_findByOrderId();
    }

    public void send_findByOrderId(long orderId) throws org.apache.thrift.TException
    {
      findByOrderId_args args = new findByOrderId_args();
      args.setOrderId(orderId);
      sendBase("findByOrderId", args);
    }

    public com.github.thrift.wrapper.domain.thrift.ThriftOrder recv_findByOrderId() throws org.apache.thrift.TException
    {
      findByOrderId_result result = new findByOrderId_result();
      receiveBase(result, "findByOrderId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByOrderId failed: unknown result");
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> findByPayerId(long payerId) throws org.apache.thrift.TException
    {
      send_findByPayerId(payerId);
      return recv_findByPayerId();
    }

    public void send_findByPayerId(long payerId) throws org.apache.thrift.TException
    {
      findByPayerId_args args = new findByPayerId_args();
      args.setPayerId(payerId);
      sendBase("findByPayerId", args);
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> recv_findByPayerId() throws org.apache.thrift.TException
    {
      findByPayerId_result result = new findByPayerId_result();
      receiveBase(result, "findByPayerId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByPayerId failed: unknown result");
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> findByCreateTime(long createTime) throws org.apache.thrift.TException
    {
      send_findByCreateTime(createTime);
      return recv_findByCreateTime();
    }

    public void send_findByCreateTime(long createTime) throws org.apache.thrift.TException
    {
      findByCreateTime_args args = new findByCreateTime_args();
      args.setCreateTime(createTime);
      sendBase("findByCreateTime", args);
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> recv_findByCreateTime() throws org.apache.thrift.TException
    {
      findByCreateTime_result result = new findByCreateTime_result();
      receiveBase(result, "findByCreateTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByCreateTime failed: unknown result");
    }

    public Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> findByOrderIds(List<Long> orderIds) throws org.apache.thrift.TException
    {
      send_findByOrderIds(orderIds);
      return recv_findByOrderIds();
    }

    public void send_findByOrderIds(List<Long> orderIds) throws org.apache.thrift.TException
    {
      findByOrderIds_args args = new findByOrderIds_args();
      args.setOrderIds(orderIds);
      sendBase("findByOrderIds", args);
    }

    public Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> recv_findByOrderIds() throws org.apache.thrift.TException
    {
      findByOrderIds_result result = new findByOrderIds_result();
      receiveBase(result, "findByOrderIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByOrderIds failed: unknown result");
    }

    public Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> findByPayerIds(List<Long> payerIds) throws org.apache.thrift.TException
    {
      send_findByPayerIds(payerIds);
      return recv_findByPayerIds();
    }

    public void send_findByPayerIds(List<Long> payerIds) throws org.apache.thrift.TException
    {
      findByPayerIds_args args = new findByPayerIds_args();
      args.setPayerIds(payerIds);
      sendBase("findByPayerIds", args);
    }

    public Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> recv_findByPayerIds() throws org.apache.thrift.TException
    {
      findByPayerIds_result result = new findByPayerIds_result();
      receiveBase(result, "findByPayerIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByPayerIds failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void save(int routingId, com.github.thrift.wrapper.domain.thrift.ThriftOrder order, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      save_call method_call = new save_call(routingId, order, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class save_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int routingId;
      private com.github.thrift.wrapper.domain.thrift.ThriftOrder order;
      public save_call(int routingId, com.github.thrift.wrapper.domain.thrift.ThriftOrder order, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.routingId = routingId;
        this.order = order;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("save", org.apache.thrift.protocol.TMessageType.CALL, 0));
        save_args args = new save_args();
        args.setRoutingId(routingId);
        args.setOrder(order);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_save();
      }
    }

    public void saveAll(int routingId, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveAll_call method_call = new saveAll_call(routingId, orders, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveAll_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int routingId;
      private List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders;
      public saveAll_call(int routingId, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.routingId = routingId;
        this.orders = orders;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveAll_args args = new saveAll_args();
        args.setRoutingId(routingId);
        args.setOrders(orders);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveAll();
      }
    }

    public void deleteOrder(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOrder_call method_call = new deleteOrder_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long orderId;
      public deleteOrder_call(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOrder_args args = new deleteOrder_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteOrder();
      }
    }

    public void findByOrderId(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByOrderId_call method_call = new findByOrderId_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByOrderId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long orderId;
      public findByOrderId_call(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByOrderId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByOrderId_args args = new findByOrderId_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.github.thrift.wrapper.domain.thrift.ThriftOrder getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByOrderId();
      }
    }

    public void findByPayerId(long payerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByPayerId_call method_call = new findByPayerId_call(payerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByPayerId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long payerId;
      public findByPayerId_call(long payerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.payerId = payerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByPayerId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByPayerId_args args = new findByPayerId_args();
        args.setPayerId(payerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByPayerId();
      }
    }

    public void findByCreateTime(long createTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByCreateTime_call method_call = new findByCreateTime_call(createTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByCreateTime_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long createTime;
      public findByCreateTime_call(long createTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.createTime = createTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByCreateTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByCreateTime_args args = new findByCreateTime_args();
        args.setCreateTime(createTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByCreateTime();
      }
    }

    public void findByOrderIds(List<Long> orderIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByOrderIds_call method_call = new findByOrderIds_call(orderIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByOrderIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> orderIds;
      public findByOrderIds_call(List<Long> orderIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderIds = orderIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByOrderIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByOrderIds_args args = new findByOrderIds_args();
        args.setOrderIds(orderIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByOrderIds();
      }
    }

    public void findByPayerIds(List<Long> payerIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByPayerIds_call method_call = new findByPayerIds_call(payerIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByPayerIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> payerIds;
      public findByPayerIds_call(List<Long> payerIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.payerIds = payerIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByPayerIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByPayerIds_args args = new findByPayerIds_args();
        args.setPayerIds(payerIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByPayerIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("save", new save());
      processMap.put("saveAll", new saveAll());
      processMap.put("deleteOrder", new deleteOrder());
      processMap.put("findByOrderId", new findByOrderId());
      processMap.put("findByPayerId", new findByPayerId());
      processMap.put("findByCreateTime", new findByCreateTime());
      processMap.put("findByOrderIds", new findByOrderIds());
      processMap.put("findByPayerIds", new findByPayerIds());
      return processMap;
    }

    public static class save<I extends Iface> extends org.apache.thrift.ProcessFunction<I, save_args> {
      public save() {
        super("save");
      }

      public save_args getEmptyArgsInstance() {
        return new save_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public save_result getResult(I iface, save_args args) throws org.apache.thrift.TException {
        save_result result = new save_result();
        iface.save(args.routingId, args.order);
        return result;
      }
    }

    public static class saveAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveAll_args> {
      public saveAll() {
        super("saveAll");
      }

      public saveAll_args getEmptyArgsInstance() {
        return new saveAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveAll_result getResult(I iface, saveAll_args args) throws org.apache.thrift.TException {
        saveAll_result result = new saveAll_result();
        iface.saveAll(args.routingId, args.orders);
        return result;
      }
    }

    public static class deleteOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOrder_args> {
      public deleteOrder() {
        super("deleteOrder");
      }

      public deleteOrder_args getEmptyArgsInstance() {
        return new deleteOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOrder_result getResult(I iface, deleteOrder_args args) throws org.apache.thrift.TException {
        deleteOrder_result result = new deleteOrder_result();
        iface.deleteOrder(args.orderId);
        return result;
      }
    }

    public static class findByOrderId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByOrderId_args> {
      public findByOrderId() {
        super("findByOrderId");
      }

      public findByOrderId_args getEmptyArgsInstance() {
        return new findByOrderId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByOrderId_result getResult(I iface, findByOrderId_args args) throws org.apache.thrift.TException {
        findByOrderId_result result = new findByOrderId_result();
        result.success = iface.findByOrderId(args.orderId);
        return result;
      }
    }

    public static class findByPayerId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByPayerId_args> {
      public findByPayerId() {
        super("findByPayerId");
      }

      public findByPayerId_args getEmptyArgsInstance() {
        return new findByPayerId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByPayerId_result getResult(I iface, findByPayerId_args args) throws org.apache.thrift.TException {
        findByPayerId_result result = new findByPayerId_result();
        result.success = iface.findByPayerId(args.payerId);
        return result;
      }
    }

    public static class findByCreateTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByCreateTime_args> {
      public findByCreateTime() {
        super("findByCreateTime");
      }

      public findByCreateTime_args getEmptyArgsInstance() {
        return new findByCreateTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByCreateTime_result getResult(I iface, findByCreateTime_args args) throws org.apache.thrift.TException {
        findByCreateTime_result result = new findByCreateTime_result();
        result.success = iface.findByCreateTime(args.createTime);
        return result;
      }
    }

    public static class findByOrderIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByOrderIds_args> {
      public findByOrderIds() {
        super("findByOrderIds");
      }

      public findByOrderIds_args getEmptyArgsInstance() {
        return new findByOrderIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByOrderIds_result getResult(I iface, findByOrderIds_args args) throws org.apache.thrift.TException {
        findByOrderIds_result result = new findByOrderIds_result();
        result.success = iface.findByOrderIds(args.orderIds);
        return result;
      }
    }

    public static class findByPayerIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByPayerIds_args> {
      public findByPayerIds() {
        super("findByPayerIds");
      }

      public findByPayerIds_args getEmptyArgsInstance() {
        return new findByPayerIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByPayerIds_result getResult(I iface, findByPayerIds_args args) throws org.apache.thrift.TException {
        findByPayerIds_result result = new findByPayerIds_result();
        result.success = iface.findByPayerIds(args.payerIds);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("save", new save());
      processMap.put("saveAll", new saveAll());
      processMap.put("deleteOrder", new deleteOrder());
      processMap.put("findByOrderId", new findByOrderId());
      processMap.put("findByPayerId", new findByPayerId());
      processMap.put("findByCreateTime", new findByCreateTime());
      processMap.put("findByOrderIds", new findByOrderIds());
      processMap.put("findByPayerIds", new findByPayerIds());
      return processMap;
    }

    public static class save<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, save_args, Void> {
      public save() {
        super("save");
      }

      public save_args getEmptyArgsInstance() {
        return new save_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            save_result result = new save_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            save_result result = new save_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, save_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.save(args.routingId, args.order,resultHandler);
      }
    }

    public static class saveAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveAll_args, Void> {
      public saveAll() {
        super("saveAll");
      }

      public saveAll_args getEmptyArgsInstance() {
        return new saveAll_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveAll_result result = new saveAll_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveAll_result result = new saveAll_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveAll_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveAll(args.routingId, args.orders,resultHandler);
      }
    }

    public static class deleteOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOrder_args, Void> {
      public deleteOrder() {
        super("deleteOrder");
      }

      public deleteOrder_args getEmptyArgsInstance() {
        return new deleteOrder_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteOrder_result result = new deleteOrder_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOrder_result result = new deleteOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteOrder(args.orderId,resultHandler);
      }
    }

    public static class findByOrderId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByOrderId_args, com.github.thrift.wrapper.domain.thrift.ThriftOrder> {
      public findByOrderId() {
        super("findByOrderId");
      }

      public findByOrderId_args getEmptyArgsInstance() {
        return new findByOrderId_args();
      }

      public AsyncMethodCallback<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.github.thrift.wrapper.domain.thrift.ThriftOrder>() { 
          public void onComplete(com.github.thrift.wrapper.domain.thrift.ThriftOrder o) {
            findByOrderId_result result = new findByOrderId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findByOrderId_result result = new findByOrderId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByOrderId_args args, org.apache.thrift.async.AsyncMethodCallback<com.github.thrift.wrapper.domain.thrift.ThriftOrder> resultHandler) throws TException {
        iface.findByOrderId(args.orderId,resultHandler);
      }
    }

    public static class findByPayerId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByPayerId_args, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> {
      public findByPayerId() {
        super("findByPayerId");
      }

      public findByPayerId_args getEmptyArgsInstance() {
        return new findByPayerId_args();
      }

      public AsyncMethodCallback<List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>() { 
          public void onComplete(List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> o) {
            findByPayerId_result result = new findByPayerId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findByPayerId_result result = new findByPayerId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByPayerId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> resultHandler) throws TException {
        iface.findByPayerId(args.payerId,resultHandler);
      }
    }

    public static class findByCreateTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByCreateTime_args, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> {
      public findByCreateTime() {
        super("findByCreateTime");
      }

      public findByCreateTime_args getEmptyArgsInstance() {
        return new findByCreateTime_args();
      }

      public AsyncMethodCallback<List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>() { 
          public void onComplete(List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> o) {
            findByCreateTime_result result = new findByCreateTime_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findByCreateTime_result result = new findByCreateTime_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByCreateTime_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> resultHandler) throws TException {
        iface.findByCreateTime(args.createTime,resultHandler);
      }
    }

    public static class findByOrderIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByOrderIds_args, Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>> {
      public findByOrderIds() {
        super("findByOrderIds");
      }

      public findByOrderIds_args getEmptyArgsInstance() {
        return new findByOrderIds_args();
      }

      public AsyncMethodCallback<Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>>() { 
          public void onComplete(Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> o) {
            findByOrderIds_result result = new findByOrderIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findByOrderIds_result result = new findByOrderIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByOrderIds_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>> resultHandler) throws TException {
        iface.findByOrderIds(args.orderIds,resultHandler);
      }
    }

    public static class findByPayerIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByPayerIds_args, Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>> {
      public findByPayerIds() {
        super("findByPayerIds");
      }

      public findByPayerIds_args getEmptyArgsInstance() {
        return new findByPayerIds_args();
      }

      public AsyncMethodCallback<Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>>() { 
          public void onComplete(Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> o) {
            findByPayerIds_result result = new findByPayerIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findByPayerIds_result result = new findByPayerIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByPayerIds_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>> resultHandler) throws TException {
        iface.findByPayerIds(args.payerIds,resultHandler);
      }
    }

  }

  public static class save_args implements org.apache.thrift.TBase<save_args, save_args._Fields>, java.io.Serializable, Cloneable, Comparable<save_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("save_args");

    private static final org.apache.thrift.protocol.TField ROUTING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("routingId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new save_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new save_argsTupleSchemeFactory());
    }

    public int routingId; // required
    public com.github.thrift.wrapper.domain.thrift.ThriftOrder order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUTING_ID((short)1, "routingId"),
      ORDER((short)2, "order");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUTING_ID
            return ROUTING_ID;
          case 2: // ORDER
            return ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROUTINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUTING_ID, new org.apache.thrift.meta_data.FieldMetaData("routingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.thrift.wrapper.domain.thrift.ThriftOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(save_args.class, metaDataMap);
    }

    public save_args() {
    }

    public save_args(
      int routingId,
      com.github.thrift.wrapper.domain.thrift.ThriftOrder order)
    {
      this();
      this.routingId = routingId;
      setRoutingIdIsSet(true);
      this.order = order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public save_args(save_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.routingId = other.routingId;
      if (other.isSetOrder()) {
        this.order = new com.github.thrift.wrapper.domain.thrift.ThriftOrder(other.order);
      }
    }

    public save_args deepCopy() {
      return new save_args(this);
    }

    @Override
    public void clear() {
      setRoutingIdIsSet(false);
      this.routingId = 0;
      this.order = null;
    }

    public int getRoutingId() {
      return this.routingId;
    }

    public save_args setRoutingId(int routingId) {
      this.routingId = routingId;
      setRoutingIdIsSet(true);
      return this;
    }

    public void unsetRoutingId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUTINGID_ISSET_ID);
    }

    /** Returns true if field routingId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoutingId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUTINGID_ISSET_ID);
    }

    public void setRoutingIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUTINGID_ISSET_ID, value);
    }

    public com.github.thrift.wrapper.domain.thrift.ThriftOrder getOrder() {
      return this.order;
    }

    public save_args setOrder(com.github.thrift.wrapper.domain.thrift.ThriftOrder order) {
      this.order = order;
      return this;
    }

    public void unsetOrder() {
      this.order = null;
    }

    /** Returns true if field order is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder() {
      return this.order != null;
    }

    public void setOrderIsSet(boolean value) {
      if (!value) {
        this.order = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUTING_ID:
        if (value == null) {
          unsetRoutingId();
        } else {
          setRoutingId((Integer)value);
        }
        break;

      case ORDER:
        if (value == null) {
          unsetOrder();
        } else {
          setOrder((com.github.thrift.wrapper.domain.thrift.ThriftOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUTING_ID:
        return getRoutingId();

      case ORDER:
        return getOrder();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUTING_ID:
        return isSetRoutingId();
      case ORDER:
        return isSetOrder();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof save_args)
        return this.equals((save_args)that);
      return false;
    }

    public boolean equals(save_args that) {
      if (that == null)
        return false;

      boolean this_present_routingId = true;
      boolean that_present_routingId = true;
      if (this_present_routingId || that_present_routingId) {
        if (!(this_present_routingId && that_present_routingId))
          return false;
        if (this.routingId != that.routingId)
          return false;
      }

      boolean this_present_order = true && this.isSetOrder();
      boolean that_present_order = true && that.isSetOrder();
      if (this_present_order || that_present_order) {
        if (!(this_present_order && that_present_order))
          return false;
        if (!this.order.equals(that.order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_routingId = true;
      list.add(present_routingId);
      if (present_routingId)
        list.add(routingId);

      boolean present_order = true && (isSetOrder());
      list.add(present_order);
      if (present_order)
        list.add(order);

      return list.hashCode();
    }

    @Override
    public int compareTo(save_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoutingId()).compareTo(other.isSetRoutingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoutingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routingId, other.routingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("save_args(");
      boolean first = true;

      sb.append("routingId:");
      sb.append(this.routingId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("order:");
      if (this.order == null) {
        sb.append("null");
      } else {
        sb.append(this.order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (order != null) {
        order.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class save_argsStandardSchemeFactory implements SchemeFactory {
      public save_argsStandardScheme getScheme() {
        return new save_argsStandardScheme();
      }
    }

    private static class save_argsStandardScheme extends StandardScheme<save_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, save_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUTING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.routingId = iprot.readI32();
                struct.setRoutingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.order = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                struct.order.read(iprot);
                struct.setOrderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, save_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROUTING_ID_FIELD_DESC);
        oprot.writeI32(struct.routingId);
        oprot.writeFieldEnd();
        if (struct.order != null) {
          oprot.writeFieldBegin(ORDER_FIELD_DESC);
          struct.order.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class save_argsTupleSchemeFactory implements SchemeFactory {
      public save_argsTupleScheme getScheme() {
        return new save_argsTupleScheme();
      }
    }

    private static class save_argsTupleScheme extends TupleScheme<save_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, save_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoutingId()) {
          optionals.set(0);
        }
        if (struct.isSetOrder()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoutingId()) {
          oprot.writeI32(struct.routingId);
        }
        if (struct.isSetOrder()) {
          struct.order.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, save_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.routingId = iprot.readI32();
          struct.setRoutingIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.order = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
          struct.order.read(iprot);
          struct.setOrderIsSet(true);
        }
      }
    }

  }

  public static class save_result implements org.apache.thrift.TBase<save_result, save_result._Fields>, java.io.Serializable, Cloneable, Comparable<save_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("save_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new save_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new save_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(save_result.class, metaDataMap);
    }

    public save_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public save_result(save_result other) {
    }

    public save_result deepCopy() {
      return new save_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof save_result)
        return this.equals((save_result)that);
      return false;
    }

    public boolean equals(save_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(save_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("save_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class save_resultStandardSchemeFactory implements SchemeFactory {
      public save_resultStandardScheme getScheme() {
        return new save_resultStandardScheme();
      }
    }

    private static class save_resultStandardScheme extends StandardScheme<save_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, save_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, save_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class save_resultTupleSchemeFactory implements SchemeFactory {
      public save_resultTupleScheme getScheme() {
        return new save_resultTupleScheme();
      }
    }

    private static class save_resultTupleScheme extends TupleScheme<save_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, save_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, save_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveAll_args implements org.apache.thrift.TBase<saveAll_args, saveAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAll_args");

    private static final org.apache.thrift.protocol.TField ROUTING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("routingId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orders", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAll_argsTupleSchemeFactory());
    }

    public int routingId; // required
    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUTING_ID((short)1, "routingId"),
      ORDERS((short)2, "orders");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUTING_ID
            return ROUTING_ID;
          case 2: // ORDERS
            return ORDERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROUTINGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUTING_ID, new org.apache.thrift.meta_data.FieldMetaData("routingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORDERS, new org.apache.thrift.meta_data.FieldMetaData("orders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.thrift.wrapper.domain.thrift.ThriftOrder.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAll_args.class, metaDataMap);
    }

    public saveAll_args() {
    }

    public saveAll_args(
      int routingId,
      List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders)
    {
      this();
      this.routingId = routingId;
      setRoutingIdIsSet(true);
      this.orders = orders;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAll_args(saveAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.routingId = other.routingId;
      if (other.isSetOrders()) {
        List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> __this__orders = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(other.orders.size());
        for (com.github.thrift.wrapper.domain.thrift.ThriftOrder other_element : other.orders) {
          __this__orders.add(new com.github.thrift.wrapper.domain.thrift.ThriftOrder(other_element));
        }
        this.orders = __this__orders;
      }
    }

    public saveAll_args deepCopy() {
      return new saveAll_args(this);
    }

    @Override
    public void clear() {
      setRoutingIdIsSet(false);
      this.routingId = 0;
      this.orders = null;
    }

    public int getRoutingId() {
      return this.routingId;
    }

    public saveAll_args setRoutingId(int routingId) {
      this.routingId = routingId;
      setRoutingIdIsSet(true);
      return this;
    }

    public void unsetRoutingId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUTINGID_ISSET_ID);
    }

    /** Returns true if field routingId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoutingId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUTINGID_ISSET_ID);
    }

    public void setRoutingIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUTINGID_ISSET_ID, value);
    }

    public int getOrdersSize() {
      return (this.orders == null) ? 0 : this.orders.size();
    }

    public java.util.Iterator<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getOrdersIterator() {
      return (this.orders == null) ? null : this.orders.iterator();
    }

    public void addToOrders(com.github.thrift.wrapper.domain.thrift.ThriftOrder elem) {
      if (this.orders == null) {
        this.orders = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>();
      }
      this.orders.add(elem);
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getOrders() {
      return this.orders;
    }

    public saveAll_args setOrders(List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> orders) {
      this.orders = orders;
      return this;
    }

    public void unsetOrders() {
      this.orders = null;
    }

    /** Returns true if field orders is set (has been assigned a value) and false otherwise */
    public boolean isSetOrders() {
      return this.orders != null;
    }

    public void setOrdersIsSet(boolean value) {
      if (!value) {
        this.orders = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUTING_ID:
        if (value == null) {
          unsetRoutingId();
        } else {
          setRoutingId((Integer)value);
        }
        break;

      case ORDERS:
        if (value == null) {
          unsetOrders();
        } else {
          setOrders((List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUTING_ID:
        return getRoutingId();

      case ORDERS:
        return getOrders();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUTING_ID:
        return isSetRoutingId();
      case ORDERS:
        return isSetOrders();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAll_args)
        return this.equals((saveAll_args)that);
      return false;
    }

    public boolean equals(saveAll_args that) {
      if (that == null)
        return false;

      boolean this_present_routingId = true;
      boolean that_present_routingId = true;
      if (this_present_routingId || that_present_routingId) {
        if (!(this_present_routingId && that_present_routingId))
          return false;
        if (this.routingId != that.routingId)
          return false;
      }

      boolean this_present_orders = true && this.isSetOrders();
      boolean that_present_orders = true && that.isSetOrders();
      if (this_present_orders || that_present_orders) {
        if (!(this_present_orders && that_present_orders))
          return false;
        if (!this.orders.equals(that.orders))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_routingId = true;
      list.add(present_routingId);
      if (present_routingId)
        list.add(routingId);

      boolean present_orders = true && (isSetOrders());
      list.add(present_orders);
      if (present_orders)
        list.add(orders);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoutingId()).compareTo(other.isSetRoutingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoutingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routingId, other.routingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrders()).compareTo(other.isSetOrders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orders, other.orders);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAll_args(");
      boolean first = true;

      sb.append("routingId:");
      sb.append(this.routingId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orders:");
      if (this.orders == null) {
        sb.append("null");
      } else {
        sb.append(this.orders);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAll_argsStandardSchemeFactory implements SchemeFactory {
      public saveAll_argsStandardScheme getScheme() {
        return new saveAll_argsStandardScheme();
      }
    }

    private static class saveAll_argsStandardScheme extends StandardScheme<saveAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUTING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.routingId = iprot.readI32();
                struct.setRoutingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.orders = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list0.size);
                  com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                    _elem1.read(iprot);
                    struct.orders.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOrdersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROUTING_ID_FIELD_DESC);
        oprot.writeI32(struct.routingId);
        oprot.writeFieldEnd();
        if (struct.orders != null) {
          oprot.writeFieldBegin(ORDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orders.size()));
            for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter3 : struct.orders)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAll_argsTupleSchemeFactory implements SchemeFactory {
      public saveAll_argsTupleScheme getScheme() {
        return new saveAll_argsTupleScheme();
      }
    }

    private static class saveAll_argsTupleScheme extends TupleScheme<saveAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoutingId()) {
          optionals.set(0);
        }
        if (struct.isSetOrders()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRoutingId()) {
          oprot.writeI32(struct.routingId);
        }
        if (struct.isSetOrders()) {
          {
            oprot.writeI32(struct.orders.size());
            for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter4 : struct.orders)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.routingId = iprot.readI32();
          struct.setRoutingIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.orders = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list5.size);
            com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
              _elem6.read(iprot);
              struct.orders.add(_elem6);
            }
          }
          struct.setOrdersIsSet(true);
        }
      }
    }

  }

  public static class saveAll_result implements org.apache.thrift.TBase<saveAll_result, saveAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveAll_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveAll_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveAll_result.class, metaDataMap);
    }

    public saveAll_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveAll_result(saveAll_result other) {
    }

    public saveAll_result deepCopy() {
      return new saveAll_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveAll_result)
        return this.equals((saveAll_result)that);
      return false;
    }

    public boolean equals(saveAll_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveAll_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveAll_resultStandardSchemeFactory implements SchemeFactory {
      public saveAll_resultStandardScheme getScheme() {
        return new saveAll_resultStandardScheme();
      }
    }

    private static class saveAll_resultStandardScheme extends StandardScheme<saveAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveAll_resultTupleSchemeFactory implements SchemeFactory {
      public saveAll_resultTupleScheme getScheme() {
        return new saveAll_resultTupleScheme();
      }
    }

    private static class saveAll_resultTupleScheme extends TupleScheme<saveAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteOrder_args implements org.apache.thrift.TBase<deleteOrder_args, deleteOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOrder_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOrder_argsTupleSchemeFactory());
    }

    public long orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOrder_args.class, metaDataMap);
    }

    public deleteOrder_args() {
    }

    public deleteOrder_args(
      long orderId)
    {
      this();
      this.orderId = orderId;
      setOrderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOrder_args(deleteOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderId = other.orderId;
    }

    public deleteOrder_args deepCopy() {
      return new deleteOrder_args(this);
    }

    @Override
    public void clear() {
      setOrderIdIsSet(false);
      this.orderId = 0;
    }

    public long getOrderId() {
      return this.orderId;
    }

    public deleteOrder_args setOrderId(long orderId) {
      this.orderId = orderId;
      setOrderIdIsSet(true);
      return this;
    }

    public void unsetOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    public void setOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOrder_args)
        return this.equals((deleteOrder_args)that);
      return false;
    }

    public boolean equals(deleteOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true;
      boolean that_present_orderId = true;
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (this.orderId != that.orderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true;
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOrder_args(");
      boolean first = true;

      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOrder_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOrder_argsStandardScheme getScheme() {
        return new deleteOrder_argsStandardScheme();
      }
    }

    private static class deleteOrder_argsStandardScheme extends StandardScheme<deleteOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.orderId = iprot.readI64();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOrder_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOrder_argsTupleScheme getScheme() {
        return new deleteOrder_argsTupleScheme();
      }
    }

    private static class deleteOrder_argsTupleScheme extends TupleScheme<deleteOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeI64(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readI64();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class deleteOrder_result implements org.apache.thrift.TBase<deleteOrder_result, deleteOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOrder_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOrder_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOrder_result.class, metaDataMap);
    }

    public deleteOrder_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOrder_result(deleteOrder_result other) {
    }

    public deleteOrder_result deepCopy() {
      return new deleteOrder_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOrder_result)
        return this.equals((deleteOrder_result)that);
      return false;
    }

    public boolean equals(deleteOrder_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOrder_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOrder_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOrder_resultStandardScheme getScheme() {
        return new deleteOrder_resultStandardScheme();
      }
    }

    private static class deleteOrder_resultStandardScheme extends StandardScheme<deleteOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOrder_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOrder_resultTupleScheme getScheme() {
        return new deleteOrder_resultTupleScheme();
      }
    }

    private static class deleteOrder_resultTupleScheme extends TupleScheme<deleteOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findByOrderId_args implements org.apache.thrift.TBase<findByOrderId_args, findByOrderId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByOrderId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByOrderId_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByOrderId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByOrderId_argsTupleSchemeFactory());
    }

    public long orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByOrderId_args.class, metaDataMap);
    }

    public findByOrderId_args() {
    }

    public findByOrderId_args(
      long orderId)
    {
      this();
      this.orderId = orderId;
      setOrderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByOrderId_args(findByOrderId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderId = other.orderId;
    }

    public findByOrderId_args deepCopy() {
      return new findByOrderId_args(this);
    }

    @Override
    public void clear() {
      setOrderIdIsSet(false);
      this.orderId = 0;
    }

    public long getOrderId() {
      return this.orderId;
    }

    public findByOrderId_args setOrderId(long orderId) {
      this.orderId = orderId;
      setOrderIdIsSet(true);
      return this;
    }

    public void unsetOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    public void setOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByOrderId_args)
        return this.equals((findByOrderId_args)that);
      return false;
    }

    public boolean equals(findByOrderId_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true;
      boolean that_present_orderId = true;
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (this.orderId != that.orderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true;
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByOrderId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByOrderId_args(");
      boolean first = true;

      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByOrderId_argsStandardSchemeFactory implements SchemeFactory {
      public findByOrderId_argsStandardScheme getScheme() {
        return new findByOrderId_argsStandardScheme();
      }
    }

    private static class findByOrderId_argsStandardScheme extends StandardScheme<findByOrderId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.orderId = iprot.readI64();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByOrderId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByOrderId_argsTupleSchemeFactory implements SchemeFactory {
      public findByOrderId_argsTupleScheme getScheme() {
        return new findByOrderId_argsTupleScheme();
      }
    }

    private static class findByOrderId_argsTupleScheme extends TupleScheme<findByOrderId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeI64(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readI64();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class findByOrderId_result implements org.apache.thrift.TBase<findByOrderId_result, findByOrderId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByOrderId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByOrderId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByOrderId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByOrderId_resultTupleSchemeFactory());
    }

    public com.github.thrift.wrapper.domain.thrift.ThriftOrder success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.thrift.wrapper.domain.thrift.ThriftOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByOrderId_result.class, metaDataMap);
    }

    public findByOrderId_result() {
    }

    public findByOrderId_result(
      com.github.thrift.wrapper.domain.thrift.ThriftOrder success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByOrderId_result(findByOrderId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.github.thrift.wrapper.domain.thrift.ThriftOrder(other.success);
      }
    }

    public findByOrderId_result deepCopy() {
      return new findByOrderId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.github.thrift.wrapper.domain.thrift.ThriftOrder getSuccess() {
      return this.success;
    }

    public findByOrderId_result setSuccess(com.github.thrift.wrapper.domain.thrift.ThriftOrder success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.github.thrift.wrapper.domain.thrift.ThriftOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByOrderId_result)
        return this.equals((findByOrderId_result)that);
      return false;
    }

    public boolean equals(findByOrderId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByOrderId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByOrderId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByOrderId_resultStandardSchemeFactory implements SchemeFactory {
      public findByOrderId_resultStandardScheme getScheme() {
        return new findByOrderId_resultStandardScheme();
      }
    }

    private static class findByOrderId_resultStandardScheme extends StandardScheme<findByOrderId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByOrderId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByOrderId_resultTupleSchemeFactory implements SchemeFactory {
      public findByOrderId_resultTupleScheme getScheme() {
        return new findByOrderId_resultTupleScheme();
      }
    }

    private static class findByOrderId_resultTupleScheme extends TupleScheme<findByOrderId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findByPayerId_args implements org.apache.thrift.TBase<findByPayerId_args, findByPayerId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByPayerId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByPayerId_args");

    private static final org.apache.thrift.protocol.TField PAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("payerId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByPayerId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByPayerId_argsTupleSchemeFactory());
    }

    public long payerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYER_ID((short)1, "payerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYER_ID
            return PAYER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAYERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("payerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByPayerId_args.class, metaDataMap);
    }

    public findByPayerId_args() {
    }

    public findByPayerId_args(
      long payerId)
    {
      this();
      this.payerId = payerId;
      setPayerIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByPayerId_args(findByPayerId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.payerId = other.payerId;
    }

    public findByPayerId_args deepCopy() {
      return new findByPayerId_args(this);
    }

    @Override
    public void clear() {
      setPayerIdIsSet(false);
      this.payerId = 0;
    }

    public long getPayerId() {
      return this.payerId;
    }

    public findByPayerId_args setPayerId(long payerId) {
      this.payerId = payerId;
      setPayerIdIsSet(true);
      return this;
    }

    public void unsetPayerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYERID_ISSET_ID);
    }

    /** Returns true if field payerId is set (has been assigned a value) and false otherwise */
    public boolean isSetPayerId() {
      return EncodingUtils.testBit(__isset_bitfield, __PAYERID_ISSET_ID);
    }

    public void setPayerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYER_ID:
        if (value == null) {
          unsetPayerId();
        } else {
          setPayerId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYER_ID:
        return getPayerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYER_ID:
        return isSetPayerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByPayerId_args)
        return this.equals((findByPayerId_args)that);
      return false;
    }

    public boolean equals(findByPayerId_args that) {
      if (that == null)
        return false;

      boolean this_present_payerId = true;
      boolean that_present_payerId = true;
      if (this_present_payerId || that_present_payerId) {
        if (!(this_present_payerId && that_present_payerId))
          return false;
        if (this.payerId != that.payerId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_payerId = true;
      list.add(present_payerId);
      if (present_payerId)
        list.add(payerId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByPayerId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPayerId()).compareTo(other.isSetPayerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payerId, other.payerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByPayerId_args(");
      boolean first = true;

      sb.append("payerId:");
      sb.append(this.payerId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByPayerId_argsStandardSchemeFactory implements SchemeFactory {
      public findByPayerId_argsStandardScheme getScheme() {
        return new findByPayerId_argsStandardScheme();
      }
    }

    private static class findByPayerId_argsStandardScheme extends StandardScheme<findByPayerId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByPayerId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.payerId = iprot.readI64();
                struct.setPayerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByPayerId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PAYER_ID_FIELD_DESC);
        oprot.writeI64(struct.payerId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByPayerId_argsTupleSchemeFactory implements SchemeFactory {
      public findByPayerId_argsTupleScheme getScheme() {
        return new findByPayerId_argsTupleScheme();
      }
    }

    private static class findByPayerId_argsTupleScheme extends TupleScheme<findByPayerId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByPayerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPayerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPayerId()) {
          oprot.writeI64(struct.payerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByPayerId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.payerId = iprot.readI64();
          struct.setPayerIdIsSet(true);
        }
      }
    }

  }

  public static class findByPayerId_result implements org.apache.thrift.TBase<findByPayerId_result, findByPayerId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByPayerId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByPayerId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByPayerId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByPayerId_resultTupleSchemeFactory());
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.thrift.wrapper.domain.thrift.ThriftOrder.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByPayerId_result.class, metaDataMap);
    }

    public findByPayerId_result() {
    }

    public findByPayerId_result(
      List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByPayerId_result(findByPayerId_result other) {
      if (other.isSetSuccess()) {
        List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> __this__success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(other.success.size());
        for (com.github.thrift.wrapper.domain.thrift.ThriftOrder other_element : other.success) {
          __this__success.add(new com.github.thrift.wrapper.domain.thrift.ThriftOrder(other_element));
        }
        this.success = __this__success;
      }
    }

    public findByPayerId_result deepCopy() {
      return new findByPayerId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.github.thrift.wrapper.domain.thrift.ThriftOrder elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>();
      }
      this.success.add(elem);
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getSuccess() {
      return this.success;
    }

    public findByPayerId_result setSuccess(List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByPayerId_result)
        return this.equals((findByPayerId_result)that);
      return false;
    }

    public boolean equals(findByPayerId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByPayerId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByPayerId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByPayerId_resultStandardSchemeFactory implements SchemeFactory {
      public findByPayerId_resultStandardScheme getScheme() {
        return new findByPayerId_resultStandardScheme();
      }
    }

    private static class findByPayerId_resultStandardScheme extends StandardScheme<findByPayerId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByPayerId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list8.size);
                  com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByPayerId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByPayerId_resultTupleSchemeFactory implements SchemeFactory {
      public findByPayerId_resultTupleScheme getScheme() {
        return new findByPayerId_resultTupleScheme();
      }
    }

    private static class findByPayerId_resultTupleScheme extends TupleScheme<findByPayerId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByPayerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByPayerId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list13.size);
            com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findByCreateTime_args implements org.apache.thrift.TBase<findByCreateTime_args, findByCreateTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByCreateTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByCreateTime_args");

    private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByCreateTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByCreateTime_argsTupleSchemeFactory());
    }

    public long createTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CREATE_TIME((short)1, "createTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CREATE_TIME
            return CREATE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CREATETIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByCreateTime_args.class, metaDataMap);
    }

    public findByCreateTime_args() {
    }

    public findByCreateTime_args(
      long createTime)
    {
      this();
      this.createTime = createTime;
      setCreateTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByCreateTime_args(findByCreateTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.createTime = other.createTime;
    }

    public findByCreateTime_args deepCopy() {
      return new findByCreateTime_args(this);
    }

    @Override
    public void clear() {
      setCreateTimeIsSet(false);
      this.createTime = 0;
    }

    public long getCreateTime() {
      return this.createTime;
    }

    public findByCreateTime_args setCreateTime(long createTime) {
      this.createTime = createTime;
      setCreateTimeIsSet(true);
      return this;
    }

    public void unsetCreateTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
    }

    /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateTime() {
      return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
    }

    public void setCreateTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CREATE_TIME:
        if (value == null) {
          unsetCreateTime();
        } else {
          setCreateTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CREATE_TIME:
        return getCreateTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CREATE_TIME:
        return isSetCreateTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByCreateTime_args)
        return this.equals((findByCreateTime_args)that);
      return false;
    }

    public boolean equals(findByCreateTime_args that) {
      if (that == null)
        return false;

      boolean this_present_createTime = true;
      boolean that_present_createTime = true;
      if (this_present_createTime || that_present_createTime) {
        if (!(this_present_createTime && that_present_createTime))
          return false;
        if (this.createTime != that.createTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_createTime = true;
      list.add(present_createTime);
      if (present_createTime)
        list.add(createTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByCreateTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByCreateTime_args(");
      boolean first = true;

      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByCreateTime_argsStandardSchemeFactory implements SchemeFactory {
      public findByCreateTime_argsStandardScheme getScheme() {
        return new findByCreateTime_argsStandardScheme();
      }
    }

    private static class findByCreateTime_argsStandardScheme extends StandardScheme<findByCreateTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByCreateTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CREATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.createTime = iprot.readI64();
                struct.setCreateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByCreateTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByCreateTime_argsTupleSchemeFactory implements SchemeFactory {
      public findByCreateTime_argsTupleScheme getScheme() {
        return new findByCreateTime_argsTupleScheme();
      }
    }

    private static class findByCreateTime_argsTupleScheme extends TupleScheme<findByCreateTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByCreateTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCreateTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCreateTime()) {
          oprot.writeI64(struct.createTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByCreateTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.createTime = iprot.readI64();
          struct.setCreateTimeIsSet(true);
        }
      }
    }

  }

  public static class findByCreateTime_result implements org.apache.thrift.TBase<findByCreateTime_result, findByCreateTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByCreateTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByCreateTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByCreateTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByCreateTime_resultTupleSchemeFactory());
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.thrift.wrapper.domain.thrift.ThriftOrder.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByCreateTime_result.class, metaDataMap);
    }

    public findByCreateTime_result() {
    }

    public findByCreateTime_result(
      List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByCreateTime_result(findByCreateTime_result other) {
      if (other.isSetSuccess()) {
        List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> __this__success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(other.success.size());
        for (com.github.thrift.wrapper.domain.thrift.ThriftOrder other_element : other.success) {
          __this__success.add(new com.github.thrift.wrapper.domain.thrift.ThriftOrder(other_element));
        }
        this.success = __this__success;
      }
    }

    public findByCreateTime_result deepCopy() {
      return new findByCreateTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.github.thrift.wrapper.domain.thrift.ThriftOrder elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>();
      }
      this.success.add(elem);
    }

    public List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> getSuccess() {
      return this.success;
    }

    public findByCreateTime_result setSuccess(List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByCreateTime_result)
        return this.equals((findByCreateTime_result)that);
      return false;
    }

    public boolean equals(findByCreateTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByCreateTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByCreateTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByCreateTime_resultStandardSchemeFactory implements SchemeFactory {
      public findByCreateTime_resultStandardScheme getScheme() {
        return new findByCreateTime_resultStandardScheme();
      }
    }

    private static class findByCreateTime_resultStandardScheme extends StandardScheme<findByCreateTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByCreateTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list16.size);
                  com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByCreateTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByCreateTime_resultTupleSchemeFactory implements SchemeFactory {
      public findByCreateTime_resultTupleScheme getScheme() {
        return new findByCreateTime_resultTupleScheme();
      }
    }

    private static class findByCreateTime_resultTupleScheme extends TupleScheme<findByCreateTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByCreateTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByCreateTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list21.size);
            com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findByOrderIds_args implements org.apache.thrift.TBase<findByOrderIds_args, findByOrderIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByOrderIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByOrderIds_args");

    private static final org.apache.thrift.protocol.TField ORDER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByOrderIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByOrderIds_argsTupleSchemeFactory());
    }

    public List<Long> orderIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_IDS((short)1, "orderIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_IDS
            return ORDER_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_IDS, new org.apache.thrift.meta_data.FieldMetaData("orderIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByOrderIds_args.class, metaDataMap);
    }

    public findByOrderIds_args() {
    }

    public findByOrderIds_args(
      List<Long> orderIds)
    {
      this();
      this.orderIds = orderIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByOrderIds_args(findByOrderIds_args other) {
      if (other.isSetOrderIds()) {
        List<Long> __this__orderIds = new ArrayList<Long>(other.orderIds);
        this.orderIds = __this__orderIds;
      }
    }

    public findByOrderIds_args deepCopy() {
      return new findByOrderIds_args(this);
    }

    @Override
    public void clear() {
      this.orderIds = null;
    }

    public int getOrderIdsSize() {
      return (this.orderIds == null) ? 0 : this.orderIds.size();
    }

    public java.util.Iterator<Long> getOrderIdsIterator() {
      return (this.orderIds == null) ? null : this.orderIds.iterator();
    }

    public void addToOrderIds(long elem) {
      if (this.orderIds == null) {
        this.orderIds = new ArrayList<Long>();
      }
      this.orderIds.add(elem);
    }

    public List<Long> getOrderIds() {
      return this.orderIds;
    }

    public findByOrderIds_args setOrderIds(List<Long> orderIds) {
      this.orderIds = orderIds;
      return this;
    }

    public void unsetOrderIds() {
      this.orderIds = null;
    }

    /** Returns true if field orderIds is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderIds() {
      return this.orderIds != null;
    }

    public void setOrderIdsIsSet(boolean value) {
      if (!value) {
        this.orderIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_IDS:
        if (value == null) {
          unsetOrderIds();
        } else {
          setOrderIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_IDS:
        return getOrderIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_IDS:
        return isSetOrderIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByOrderIds_args)
        return this.equals((findByOrderIds_args)that);
      return false;
    }

    public boolean equals(findByOrderIds_args that) {
      if (that == null)
        return false;

      boolean this_present_orderIds = true && this.isSetOrderIds();
      boolean that_present_orderIds = true && that.isSetOrderIds();
      if (this_present_orderIds || that_present_orderIds) {
        if (!(this_present_orderIds && that_present_orderIds))
          return false;
        if (!this.orderIds.equals(that.orderIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderIds = true && (isSetOrderIds());
      list.add(present_orderIds);
      if (present_orderIds)
        list.add(orderIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByOrderIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderIds()).compareTo(other.isSetOrderIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIds, other.orderIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByOrderIds_args(");
      boolean first = true;

      sb.append("orderIds:");
      if (this.orderIds == null) {
        sb.append("null");
      } else {
        sb.append(this.orderIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByOrderIds_argsStandardSchemeFactory implements SchemeFactory {
      public findByOrderIds_argsStandardScheme getScheme() {
        return new findByOrderIds_argsStandardScheme();
      }
    }

    private static class findByOrderIds_argsStandardScheme extends StandardScheme<findByOrderIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByOrderIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.orderIds = new ArrayList<Long>(_list24.size);
                  long _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readI64();
                    struct.orderIds.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setOrderIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByOrderIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderIds != null) {
          oprot.writeFieldBegin(ORDER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.orderIds.size()));
            for (long _iter27 : struct.orderIds)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByOrderIds_argsTupleSchemeFactory implements SchemeFactory {
      public findByOrderIds_argsTupleScheme getScheme() {
        return new findByOrderIds_argsTupleScheme();
      }
    }

    private static class findByOrderIds_argsTupleScheme extends TupleScheme<findByOrderIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByOrderIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderIds()) {
          {
            oprot.writeI32(struct.orderIds.size());
            for (long _iter28 : struct.orderIds)
            {
              oprot.writeI64(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByOrderIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.orderIds = new ArrayList<Long>(_list29.size);
            long _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readI64();
              struct.orderIds.add(_elem30);
            }
          }
          struct.setOrderIdsIsSet(true);
        }
      }
    }

  }

  public static class findByOrderIds_result implements org.apache.thrift.TBase<findByOrderIds_result, findByOrderIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByOrderIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByOrderIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByOrderIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByOrderIds_resultTupleSchemeFactory());
    }

    public Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.thrift.wrapper.domain.thrift.ThriftOrder.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByOrderIds_result.class, metaDataMap);
    }

    public findByOrderIds_result() {
    }

    public findByOrderIds_result(
      Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByOrderIds_result(findByOrderIds_result other) {
      if (other.isSetSuccess()) {
        Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> __this__success = new HashMap<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>(other.success.size());
        for (Map.Entry<Long, com.github.thrift.wrapper.domain.thrift.ThriftOrder> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          com.github.thrift.wrapper.domain.thrift.ThriftOrder other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          com.github.thrift.wrapper.domain.thrift.ThriftOrder __this__success_copy_value = new com.github.thrift.wrapper.domain.thrift.ThriftOrder(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public findByOrderIds_result deepCopy() {
      return new findByOrderIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, com.github.thrift.wrapper.domain.thrift.ThriftOrder val) {
      if (this.success == null) {
        this.success = new HashMap<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>();
      }
      this.success.put(key, val);
    }

    public Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> getSuccess() {
      return this.success;
    }

    public findByOrderIds_result setSuccess(Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByOrderIds_result)
        return this.equals((findByOrderIds_result)that);
      return false;
    }

    public boolean equals(findByOrderIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByOrderIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByOrderIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByOrderIds_resultStandardSchemeFactory implements SchemeFactory {
      public findByOrderIds_resultStandardScheme getScheme() {
        return new findByOrderIds_resultStandardScheme();
      }
    }

    private static class findByOrderIds_resultStandardScheme extends StandardScheme<findByOrderIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByOrderIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>(2*_map32.size);
                  long _key33;
                  com.github.thrift.wrapper.domain.thrift.ThriftOrder _val34;
                  for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                  {
                    _key33 = iprot.readI64();
                    _val34 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                    _val34.read(iprot);
                    struct.success.put(_key33, _val34);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByOrderIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Long, com.github.thrift.wrapper.domain.thrift.ThriftOrder> _iter36 : struct.success.entrySet())
            {
              oprot.writeI64(_iter36.getKey());
              _iter36.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByOrderIds_resultTupleSchemeFactory implements SchemeFactory {
      public findByOrderIds_resultTupleScheme getScheme() {
        return new findByOrderIds_resultTupleScheme();
      }
    }

    private static class findByOrderIds_resultTupleScheme extends TupleScheme<findByOrderIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByOrderIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, com.github.thrift.wrapper.domain.thrift.ThriftOrder> _iter37 : struct.success.entrySet())
            {
              oprot.writeI64(_iter37.getKey());
              _iter37.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByOrderIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Long,com.github.thrift.wrapper.domain.thrift.ThriftOrder>(2*_map38.size);
            long _key39;
            com.github.thrift.wrapper.domain.thrift.ThriftOrder _val40;
            for (int _i41 = 0; _i41 < _map38.size; ++_i41)
            {
              _key39 = iprot.readI64();
              _val40 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
              _val40.read(iprot);
              struct.success.put(_key39, _val40);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findByPayerIds_args implements org.apache.thrift.TBase<findByPayerIds_args, findByPayerIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByPayerIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByPayerIds_args");

    private static final org.apache.thrift.protocol.TField PAYER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("payerIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByPayerIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByPayerIds_argsTupleSchemeFactory());
    }

    public List<Long> payerIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAYER_IDS((short)1, "payerIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYER_IDS
            return PAYER_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYER_IDS, new org.apache.thrift.meta_data.FieldMetaData("payerIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByPayerIds_args.class, metaDataMap);
    }

    public findByPayerIds_args() {
    }

    public findByPayerIds_args(
      List<Long> payerIds)
    {
      this();
      this.payerIds = payerIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByPayerIds_args(findByPayerIds_args other) {
      if (other.isSetPayerIds()) {
        List<Long> __this__payerIds = new ArrayList<Long>(other.payerIds);
        this.payerIds = __this__payerIds;
      }
    }

    public findByPayerIds_args deepCopy() {
      return new findByPayerIds_args(this);
    }

    @Override
    public void clear() {
      this.payerIds = null;
    }

    public int getPayerIdsSize() {
      return (this.payerIds == null) ? 0 : this.payerIds.size();
    }

    public java.util.Iterator<Long> getPayerIdsIterator() {
      return (this.payerIds == null) ? null : this.payerIds.iterator();
    }

    public void addToPayerIds(long elem) {
      if (this.payerIds == null) {
        this.payerIds = new ArrayList<Long>();
      }
      this.payerIds.add(elem);
    }

    public List<Long> getPayerIds() {
      return this.payerIds;
    }

    public findByPayerIds_args setPayerIds(List<Long> payerIds) {
      this.payerIds = payerIds;
      return this;
    }

    public void unsetPayerIds() {
      this.payerIds = null;
    }

    /** Returns true if field payerIds is set (has been assigned a value) and false otherwise */
    public boolean isSetPayerIds() {
      return this.payerIds != null;
    }

    public void setPayerIdsIsSet(boolean value) {
      if (!value) {
        this.payerIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYER_IDS:
        if (value == null) {
          unsetPayerIds();
        } else {
          setPayerIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYER_IDS:
        return getPayerIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYER_IDS:
        return isSetPayerIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByPayerIds_args)
        return this.equals((findByPayerIds_args)that);
      return false;
    }

    public boolean equals(findByPayerIds_args that) {
      if (that == null)
        return false;

      boolean this_present_payerIds = true && this.isSetPayerIds();
      boolean that_present_payerIds = true && that.isSetPayerIds();
      if (this_present_payerIds || that_present_payerIds) {
        if (!(this_present_payerIds && that_present_payerIds))
          return false;
        if (!this.payerIds.equals(that.payerIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_payerIds = true && (isSetPayerIds());
      list.add(present_payerIds);
      if (present_payerIds)
        list.add(payerIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByPayerIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPayerIds()).compareTo(other.isSetPayerIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayerIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payerIds, other.payerIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByPayerIds_args(");
      boolean first = true;

      sb.append("payerIds:");
      if (this.payerIds == null) {
        sb.append("null");
      } else {
        sb.append(this.payerIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByPayerIds_argsStandardSchemeFactory implements SchemeFactory {
      public findByPayerIds_argsStandardScheme getScheme() {
        return new findByPayerIds_argsStandardScheme();
      }
    }

    private static class findByPayerIds_argsStandardScheme extends StandardScheme<findByPayerIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByPayerIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                  struct.payerIds = new ArrayList<Long>(_list42.size);
                  long _elem43;
                  for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                  {
                    _elem43 = iprot.readI64();
                    struct.payerIds.add(_elem43);
                  }
                  iprot.readListEnd();
                }
                struct.setPayerIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByPayerIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.payerIds != null) {
          oprot.writeFieldBegin(PAYER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.payerIds.size()));
            for (long _iter45 : struct.payerIds)
            {
              oprot.writeI64(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByPayerIds_argsTupleSchemeFactory implements SchemeFactory {
      public findByPayerIds_argsTupleScheme getScheme() {
        return new findByPayerIds_argsTupleScheme();
      }
    }

    private static class findByPayerIds_argsTupleScheme extends TupleScheme<findByPayerIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByPayerIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPayerIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPayerIds()) {
          {
            oprot.writeI32(struct.payerIds.size());
            for (long _iter46 : struct.payerIds)
            {
              oprot.writeI64(_iter46);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByPayerIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.payerIds = new ArrayList<Long>(_list47.size);
            long _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = iprot.readI64();
              struct.payerIds.add(_elem48);
            }
          }
          struct.setPayerIdsIsSet(true);
        }
      }
    }

  }

  public static class findByPayerIds_result implements org.apache.thrift.TBase<findByPayerIds_result, findByPayerIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByPayerIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByPayerIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByPayerIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByPayerIds_resultTupleSchemeFactory());
    }

    public Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.github.thrift.wrapper.domain.thrift.ThriftOrder.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByPayerIds_result.class, metaDataMap);
    }

    public findByPayerIds_result() {
    }

    public findByPayerIds_result(
      Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByPayerIds_result(findByPayerIds_result other) {
      if (other.isSetSuccess()) {
        Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> __this__success = new HashMap<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>(other.success.size());
        for (Map.Entry<Long, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> __this__success_copy_value = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(other_element_value.size());
          for (com.github.thrift.wrapper.domain.thrift.ThriftOrder other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new com.github.thrift.wrapper.domain.thrift.ThriftOrder(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public findByPayerIds_result deepCopy() {
      return new findByPayerIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> val) {
      if (this.success == null) {
        this.success = new HashMap<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>();
      }
      this.success.put(key, val);
    }

    public Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> getSuccess() {
      return this.success;
    }

    public findByPayerIds_result setSuccess(Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByPayerIds_result)
        return this.equals((findByPayerIds_result)that);
      return false;
    }

    public boolean equals(findByPayerIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findByPayerIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByPayerIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByPayerIds_resultStandardSchemeFactory implements SchemeFactory {
      public findByPayerIds_resultStandardScheme getScheme() {
        return new findByPayerIds_resultStandardScheme();
      }
    }

    private static class findByPayerIds_resultStandardScheme extends StandardScheme<findByPayerIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByPayerIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>(2*_map50.size);
                  long _key51;
                  List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> _val52;
                  for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                  {
                    _key51 = iprot.readI64();
                    {
                      org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                      _val52 = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list54.size);
                      com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem55;
                      for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                      {
                        _elem55 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                        _elem55.read(iprot);
                        _val52.add(_elem55);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key51, _val52);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByPayerIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<Long, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> _iter57 : struct.success.entrySet())
            {
              oprot.writeI64(_iter57.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter57.getValue().size()));
                for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter58 : _iter57.getValue())
                {
                  _iter58.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByPayerIds_resultTupleSchemeFactory implements SchemeFactory {
      public findByPayerIds_resultTupleScheme getScheme() {
        return new findByPayerIds_resultTupleScheme();
      }
    }

    private static class findByPayerIds_resultTupleScheme extends TupleScheme<findByPayerIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByPayerIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>> _iter59 : struct.success.entrySet())
            {
              oprot.writeI64(_iter59.getKey());
              {
                oprot.writeI32(_iter59.getValue().size());
                for (com.github.thrift.wrapper.domain.thrift.ThriftOrder _iter60 : _iter59.getValue())
                {
                  _iter60.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByPayerIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map61 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<Long,List<com.github.thrift.wrapper.domain.thrift.ThriftOrder>>(2*_map61.size);
            long _key62;
            List<com.github.thrift.wrapper.domain.thrift.ThriftOrder> _val63;
            for (int _i64 = 0; _i64 < _map61.size; ++_i64)
            {
              _key62 = iprot.readI64();
              {
                org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val63 = new ArrayList<com.github.thrift.wrapper.domain.thrift.ThriftOrder>(_list65.size);
                com.github.thrift.wrapper.domain.thrift.ThriftOrder _elem66;
                for (int _i67 = 0; _i67 < _list65.size; ++_i67)
                {
                  _elem66 = new com.github.thrift.wrapper.domain.thrift.ThriftOrder();
                  _elem66.read(iprot);
                  _val63.add(_elem66);
                }
              }
              struct.success.put(_key62, _val63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
